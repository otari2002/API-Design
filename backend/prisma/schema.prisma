// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Proxy {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  flow        Flow[]
}

enum ApigeeInstance {
  X
  HYBRID
  NONE
}

model Flow {
  id              Int              @id @default(autoincrement())
  name            String
  subject         String?
  description     String?
  proxyId         Int?
  instanceApigee  ApigeeInstance?
  domain          String?
  verb            String
  path            String
  backendId       Int?
  ssl             Boolean?
  backend         Backend?         @relation(fields: [backendId], references: [id])
  proxy           Proxy?           @relation(fields: [proxyId], references: [id], onDelete: Cascade)
  inputs          Input[]
  outputs         Output[]
  subFlowUsages   SubFlowUsage[]
  usedIn          SubFlowUsage[]   @relation("SubFlowUsage")
  requestMappings RequestMapping[]

  @@unique([proxyId, verb, path])
}

enum SourceType {
  HEADER
  BODY
  QUERY
}

enum ValueType {
  STRING
  NUMBER
  BOOLEAN
  OBJECT
  ARRAY
}

model Input {
  id             Int              @id @default(autoincrement())
  name           String
  source         SourceType
  type           ValueType
  validation     String?
  parentId       Int?
  flowId         Int
  flow           Flow             @relation(fields: [flowId], references: [id], onDelete: Cascade)
  parent         Input?           @relation("InputToChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children       Input[]          @relation("InputToChildren")
  RequestMapping RequestMapping[]
}

model Output {
  id Int @id @default(autoincrement())

  name            String
  source          SourceType
  type            ValueType?
  mapping         String?
  validation      String?
  origin          String?
  subOutputSource SourceType?
  parentId        Int?
  parent          Output?     @relation("OutputToChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children        Output[]    @relation("OutputToChildren")
  flow            Flow?       @relation(fields: [flowId], references: [id], onDelete: Cascade)
  flowId          Int?
}

model SubFlowUsage {
  id            Int     @id @default(autoincrement())
  flowId        Int
  subFlowId     Int
  isConditional Boolean
  condition     String?
  order         Int
  subFlow       Flow    @relation("SubFlowUsage", fields: [subFlowId], references: [id])
  flow          Flow    @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@unique([subFlowId, flowId])
}

model Backend {
  id        Int         @id @default(autoincrement())
  name      String?
  prodUrl   String?
  noProdUrl String?
  type      BackendType
  flows     Flow[]
}

enum BackendType {
  INTERNAL
  EXTERNAL
}

model RequestMapping {
  id              Int         @id @default(autoincrement())
  apigee          String?
  subInputId      Int
  source          SourceType
  origin          String
  subOutputSource SourceType?
  flowId          Int
  subFlowId       Int
  subInput        Input       @relation(fields: [subInputId], references: [id])
  flow            Flow        @relation(fields: [flowId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  sessions  Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}